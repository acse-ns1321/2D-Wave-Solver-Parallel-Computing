<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__timing_test_8cpp_source" xml:lang="en-US">
<title>TimingTest.cpp</title>
<indexterm><primary>AS/TimingTest.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__timing_test_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&lt;iostream&gt;</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00003"/>00003 
<anchor xml:id="__timing_test_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;TimingTest.h&quot;</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00005"/>00005 
<anchor xml:id="__timing_test_8cpp_source_1l00006"/>00006 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="__timing_test_8cpp_source_1l00007"/>00007 
<anchor xml:id="__timing_test_8cpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00009"/>00009 
<anchor xml:id="__timing_test_8cpp_source_1l00010"/>00010 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_domain_setup(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)
<anchor xml:id="__timing_test_8cpp_source_1l00011"/>00011 {
<anchor xml:id="__timing_test_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg_domain_time&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;&#32;=&#32;0;&#32;i&#32;&lt;&#32;domain_setup_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_domain_time&#32;+=&#32;domain_setup_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_domain_time&#32;=&#32;avg_domain_time&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00020"/>00020 
<anchor xml:id="__timing_test_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;Domain&#32;Setup&#32;Time&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg_domain_time&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00023"/>00023 }
<anchor xml:id="__timing_test_8cpp_source_1l00024"/>00024 
<anchor xml:id="__timing_test_8cpp_source_1l00025"/>00025 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00026"/>00026 
<anchor xml:id="__timing_test_8cpp_source_1l00027"/>00027 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_MPI_Create_setup(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)
<anchor xml:id="__timing_test_8cpp_source_1l00028"/>00028 {
<anchor xml:id="__timing_test_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg_MPI_Create_time&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;mpi_create_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_MPI_Create_time&#32;+=&#32;mpi_create_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_MPI_Create_time&#32;=&#32;avg_MPI_Create_time&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00037"/>00037 
<anchor xml:id="__timing_test_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;MPI&#32;Create&#32;Time&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg_MPI_Create_time&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00040"/>00040 
<anchor xml:id="__timing_test_8cpp_source_1l00041"/>00041 }
<anchor xml:id="__timing_test_8cpp_source_1l00042"/>00042 
<anchor xml:id="__timing_test_8cpp_source_1l00043"/>00043 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00044"/>00044 
<anchor xml:id="__timing_test_8cpp_source_1l00045"/>00045 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_MPI_comms(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)
<anchor xml:id="__timing_test_8cpp_source_1l00046"/>00046 {
<anchor xml:id="__timing_test_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg_MPI_comms_time&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;mpi_comms_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_MPI_comms_time&#32;+=&#32;mpi_comms_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg_MPI_comms_time&#32;=&#32;avg_MPI_comms_time&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00055"/>00055 
<anchor xml:id="__timing_test_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;MPI&#32;Communication&#32;Time&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg_MPI_comms_time&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00058"/>00058 
<anchor xml:id="__timing_test_8cpp_source_1l00059"/>00059 }
<anchor xml:id="__timing_test_8cpp_source_1l00060"/>00060 
<anchor xml:id="__timing_test_8cpp_source_1l00061"/>00061 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00062"/>00062 
<anchor xml:id="__timing_test_8cpp_source_1l00063"/>00063 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_edge_iterations(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)
<anchor xml:id="__timing_test_8cpp_source_1l00064"/>00064 {
<anchor xml:id="__timing_test_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;edge_iterations_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;+=&#32;edge_iterations_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;=&#32;avg&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00073"/>00073 
<anchor xml:id="__timing_test_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;Edge&#32;Iteration&#32;Time&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00076"/>00076 
<anchor xml:id="__timing_test_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__timing_test_8cpp_source_1l00078"/>00078 
<anchor xml:id="__timing_test_8cpp_source_1l00079"/>00079 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00080"/>00080 
<anchor xml:id="__timing_test_8cpp_source_1l00081"/>00081 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_inner_iterations(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)
<anchor xml:id="__timing_test_8cpp_source_1l00082"/>00082 {
<anchor xml:id="__timing_test_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;inner_iterations_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;+=&#32;inner_iterations_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;=&#32;avg&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00091"/>00091 
<anchor xml:id="__timing_test_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;Inner&#32;Iteration&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00094"/>00094 
<anchor xml:id="__timing_test_8cpp_source_1l00095"/>00095 }
<anchor xml:id="__timing_test_8cpp_source_1l00096"/>00096 
<anchor xml:id="__timing_test_8cpp_source_1l00097"/>00097 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
<anchor xml:id="__timing_test_8cpp_source_1l00098"/>00098 
<anchor xml:id="__timing_test_8cpp_source_1l00099"/>00099 <emphasis role="keywordtype">void</emphasis>&#32;TimingTest::timing_total(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p,&#32;<emphasis role="keywordtype">int</emphasis>&#32;imax,&#32;<emphasis role="keywordtype">int</emphasis>&#32;jmax)
<anchor xml:id="__timing_test_8cpp_source_1l00100"/>00100 {
<anchor xml:id="__timing_test_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>&#32;==&#32;0)
<anchor xml:id="__timing_test_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;avg&#32;=&#32;0;
<anchor xml:id="__timing_test_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;total_time.size();&#32;i++)
<anchor xml:id="__timing_test_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__timing_test_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;+=&#32;total_time[i];
<anchor xml:id="__timing_test_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;avg&#32;=&#32;avg&#32;/&#32;p;
<anchor xml:id="__timing_test_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;Average&#32;Total&#32;time&#32;for&#32;all&#32;the&#32;processes&#32;is&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;avg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;s.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="__timing_test_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="__timing_test_8cpp_source_1l00111"/>00111 
<anchor xml:id="__timing_test_8cpp_source_1l00112"/>00112 }
<anchor xml:id="__timing_test_8cpp_source_1l00113"/>00113 
<anchor xml:id="__timing_test_8cpp_source_1l00114"/>00114 <emphasis role="comment">//&#32;-------------------------------------------------------------------------------------------------------------------------|</emphasis>
</programlisting></section>
